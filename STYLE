=================================
Coding Conventions for OpenVPNweb
=================================

vim: shiftwidth=4 expandtab
encoding: utf-8

Author: Santtu Pajukanta <santtu.pajukanta@tut.fi>

Introduction
============

This document outlines the programming style for OpenVPNweb.

Examples in this document are indented by four spaces. This indentation is
not part of the actual code of the example.

Python code
===========

The recommendations given in [PEP-8] should be followed where appropriate.

The Python source code of OpenVPNweb is indented at four spaces per level.

Each executable Python source file should start with the following header:

    #!/usr/bin/env python
    # encoding: utf-8
    # vim: shiftwidth=4 expandtab

Each nonexecutable Python source file should start with the following header:

    # encoding: utf-8
    # vim: shiftwidth=4 expandtab

In both executable and nonexecutable cases, this header should be followed by
the license boilerplate.

Django templates
================

Templates are written with the readability of the template in mind, not the
readability of the content produced by the template. An automatic filter to
beautify or compress the content produced by the template may be added later.

Each template should begin with the following header:

    {% extends "whatever/this/template/extends.html" %}
    {% comment %}
    encoding: utf-8
    vim: shiftwidth=2 expandtab
    {% endcomment%}

Templates are indented at two spaces per level. Each XHTML tag and template
tag that has a closiong tag increases the indentation level, with the notable
exception of {% block %} and {% comment %} that are not indented further.

Example:

    {# CORRECT #}
    {% block content %}
    <h1>Hello, World!</h1>
    <ul>
      {% for flurb in flurbs %}
        <li>{{ flurb }}</li>
      {% endfor %}
    </ul>
    {% endblock %}

    {# INCORRECT #}
    {% block content %}
      <h1>Hello, World!</h1>    {# Wrong: block should not be indented #}
      <ul>
      {% for flurb in flurbs %} {# Wrong: this is inside <ul> #}
        <li>{{ flurb }}</li>
      {% endfor %}
      </ul>
    {% endblock %}

Django models and views
=======================

FIXME check if app_label is enough

Models and views should be placed in the .models and .views sub-packages of
their applications. Due to a braindamage in Django, splitting models over many
files requires a hack an example of which may be found in openvpnweb/
openvpn_userinterface/models/__init__.py. Such a hack is not required for
views. This hack should be removed once Django fixes their braindamage. For
more information, see

http://www.ifisgeek.com/2009/01/26/splitting-django-models-into-separate-files/


TODO, XXX and FIXME comments
============================

The words TODO, XXX and FIXME designate action points in the source code. They
are classified as follows:

    TODO denotes missing or incomplete functionality that is left to be
    implemented at a later date.

    XXX denotes broken code or temporary hacks. Problems marked XXX are
    expected to be fairly short-lived. Debug output etc. should be marked XXX.

    FIXME is a more severe form of XXX. It denotes a serious problem that
    really, really should be fixed. FIXME is not to be overused.

These action points may appear anywhere in any type of comments; however, they
should be placed near the piece of code they refer to, preferrably right
right before it.

